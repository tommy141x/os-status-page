---
interface Props {
    title: string;
}

const { title } = Astro.props;
import { ViewTransitions } from "astro:transitions";
import "@/styles/globals.css";
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta
            name="description"
            content="Stay updated with real-time information on the operational status and performance of our services. Our status page provides instant alerts on uptime, incidents, maintenance, and more, ensuring transparency and reliability for all users."
        />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/png" href="/logo.png" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <script is:inline>
            function setDarkMode(document) {
                const getThemePreference = () => {
                    if (
                        typeof localStorage !== "undefined" &&
                        localStorage.getItem("theme")
                    ) {
                        return localStorage.getItem("theme");
                    }
                    return window.matchMedia("(prefers-color-scheme: dark)")
                        .matches
                        ? "dark"
                        : "light";
                };
                const isDark = getThemePreference() === "dark";
                document.documentElement.classList[isDark ? "add" : "remove"](
                    "dark",
                );

                if (typeof localStorage !== "undefined") {
                    const observer = new MutationObserver(() => {
                        const isDark =
                            document.documentElement.classList.contains("dark");
                        localStorage.setItem(
                            "theme",
                            isDark ? "dark" : "light",
                        );
                    });
                    observer.observe(document.documentElement, {
                        attributes: true,
                        attributeFilter: ["class"],
                    });
                }
            }

            setDarkMode(document);

            document.addEventListener("astro:before-swap", (ev) => {
                // Pass the incoming document to set the theme on it
                setDarkMode(ev.newDocument);
            });
        </script>
        <ViewTransitions />
    </head>
    <body>
        <div
            class="flex items-center justify-center min-h-screen text-primary-foreground"
        >
            <slot />
        </div>
    </body>
</html>

<style is:global>
    html,
    body {
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
        font-family: system-ui, sans-serif;
    }
</style>
